@page "/pharmacySearch"

@using Pharmacies.Data.Services
@using Pharmacies.Data.Interfaces
@using Pharmacies.Data.Models
@using Pharmacies.Server.Controls
@using System.Linq

@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using GoogleMapsComponents.Maps.Places
@using GoogleMapsComponents.Maps.Coordinates

@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation


@inject IJSRuntime JSRuntime
@inject IPharmacyService PharmacyService



<link rel="stylesheet" href="css/PharmacySearch.css" />




<div class="container">
    <div class="row">
        <div class="col">
            <div class="search">

               @*<label>Search</label>*@
                <div class="input-group mb-3">
                    <input type="text" @ref="this.searchBox" id="searchBox" class="form-control" placeholder="" aria-label="" aria-describedby="button-addon2" />
                    <button @onclick="GetLocation" class="btn btn-outline-secondary" type="button" id="button-addon2">Search</button>
                </div>

            </div>
        </div>
        <div class="col">
            <select @bind="@_range" class="form-select" aria-label="Default select example">
                <option selected>Search range</option>
                <option value="2000">2km</option>
                <option value="5000">5km</option>
                <option value="10000">10km</option>
            </select>
        </div>
    </div>



    <div class="row">
        <div class="col">
            <div class="pharmacies">
                @if (_pharmacies != null)
                {
                    @foreach (var pharmacy in _pharmacies.results)
                    {
                        <PharmacyCard Name="@pharmacy.name" Vicinity="@pharmacy.vicinity" PlaceId="@pharmacy.place_id" Location="@pharmacy.geometry.location" OnClickCallback="CenterMarker" ShowDirections="AddDirections"></PharmacyCard>
                    }

                }
            </div>
        </div>
        <div class="col-8">
            <GoogleMap @ref="@(this.map1)" Id="map1" Options="@(this.mapOptions)" OnAfterInit="async () => await OnAfterMapInit()"></GoogleMap>

        </div>
    </div>
</div>



@code {
    private GoogleMap map1;
    private MapOptions mapOptions;
    private Autocomplete autocomplete;

    private readonly Stack<Marker> markers = new Stack<Marker>();
    private MarkerClustering _markerClustering;

    private string message;

    private ElementReference searchBox;

    private string _address { get; set; }
    private Location _location;
    public Rootobject _pharmacies;
    private int _range = 2000;
    public int zoom = 14;


    private WindowNavigatorGeolocation geolocation;
    private GeolocationPosition geolocationPosition;


    private PlaceResult searchedPlace;

    //direcrions
    private DirectionsRenderer dirRend;
    private string _durationTotalString;
    private string _distanceTotalString;
    private DirectionsResult _directionsResult;



    private async Task GetLocation()
    {
        //_address = await JSRuntime.InvokeAsync<string>("SetAddress");
        // _location = await PharmacyService.GetSearchedLocation(_address);
        _pharmacies = await PharmacyService.SearchPharmacies(searchedPlace.Geometry.Location.Lat, searchedPlace.Geometry.Location.Lng, _range);

        var coords = new List<LatLngLiteral>();

        foreach (var item in _pharmacies.results)
        {
            coords.Add(new LatLngLiteral { Lat = item.geometry.location.lat, Lng = item.geometry.location.lng });
        }
        if (_markerClustering != null)
            await ClearClustering();

        await InvokeClustering(coords);
        //await JSRuntime.InvokeVoidAsync("SetLocationAndMarkers", _location.lat, _location.lng, zoom, coords);

    }

    private async Task InvokeClustering(List<LatLngLiteral> coords)
    {
        var markers = await GetMarkers(coords, map1.InteropObject);

        _markerClustering = await MarkerClustering.CreateAsync(map1.JsRuntime, map1.InteropObject, markers);
        await _markerClustering.FitMapToMarkers(1);
    }

    private async Task ClearClustering()
    {
        await _markerClustering.ClearMarkers();
    }

    private async Task<IEnumerable<Marker>> GetMarkers(IEnumerable<LatLngLiteral> coords, Map map)
    {
        var result = new List<Marker>(coords.Count());
        foreach (var latLngLiteral in coords)
        {
            var marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
            {
                Position = latLngLiteral,
                Map = map,

            });

            result.Add(marker);
        }
        return result;
    }

    private async Task CenterMarker(Location markerLocation)
    {
        await this.map1.InteropObject.SetCenter(new LatLngLiteral { Lat = markerLocation.lat, Lng = markerLocation.lng });
    }

    private void GetObj()
    {
        _pharmacies = PharmacyService.GetObj();

    }



    protected override async Task OnInitializedAsync()
    {

        var window = await JSRuntime.Window();
        var navigator = await window.Navigator();

        geolocation = navigator.Geolocation;

        await GetUserLocation();

        await this.map1.InteropObject.SetCenter(new LatLngLiteral { Lat = geolocationPosition.Coords.Latitude, Lng = geolocationPosition.Coords.Longitude });
        await this.map1.InteropObject.SetZoom(zoom);

        dirRend = await DirectionsRenderer.CreateAsync(map1.JsRuntime, new DirectionsRendererOptions()
        {
            Map = map1.InteropObject
        });

        this.StateHasChanged();

    }



    public async Task GetUserLocation()
    {
        geolocationPosition = (await geolocation.GetCurrentPosition(new PositionOptions()
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
        })).Location;

    }




    private async Task OnAfterMapInit()
    {


        this.autocomplete = await Autocomplete.CreateAsync(this.map1.JsRuntime, this.searchBox, new AutocompleteOptions
        {
            StrictBounds = false,
            ComponentRestrictions = new ComponentRestrictions { Country = new[] { "pl" } }
        });

        await this.autocomplete.SetFields(new[] { "address_components", "geometry", "name" });

        await this.autocomplete.AddListener("place_changed", async () =>
        {
            var place = await this.autocomplete.GetPlace();
            searchedPlace = place;
            if (place?.Geometry == null)
            {
                this.message = "No results available for " + place?.Name;
            }
            else if (place.Geometry.Location != null)
            {
                await this.map1.InteropObject.SetCenter(place.Geometry.Location);
                await this.map1.InteropObject.SetZoom(13);

                //var marker = await Marker.CreateAsync(this.map1.JsRuntime, new MarkerOptions
                //{
                //    Position = place.Geometry.Location,
                //    Map = this.map1.InteropObject,
                //    Title = place.Name
                //});

                //this.markers.Push(marker);

                this.message = "Displaying result for " + place.Name;
            }
            else if (place.Geometry.Viewport != null)
            {
                await this.map1.InteropObject.FitBounds(place.Geometry.Viewport, 5);
                this.message = "Displaying result for " + place.Name;
            }

            this.StateHasChanged();
        });
    }



    //directions

    private async Task RemoveRoute()
    {
        await dirRend.SetDirections(null);
        await dirRend.SetMap(null);
    }

    private async Task OnAfterInitAsync()
    {
        //Create instance of DirectionRenderer
        dirRend = await DirectionsRenderer.CreateAsync(map1.JsRuntime, new DirectionsRendererOptions()
        {
            Map = map1.InteropObject
        });
    }


    private async Task AddDirections(Location location)
    {
        //Adding a waypoint
        // var waypoints = new List<DirectionsWaypoint>();

        //Direction Request
        DirectionsRequest dr = new DirectionsRequest();
        dr.Origin = searchedPlace.Geometry.Location;
        dr.Destination = new LatLngLiteral { Lat = location.lat, Lng = location.lng };
        //dr.Waypoints = waypoints;
        dr.TravelMode = TravelMode.Driving;
        dr.DrivingOptions = new DrivingOptions()
        {
            DepartureTime = DateTime.Now.AddHours(1)
        };

        //Calculate Route
        _directionsResult = await dirRend.Route(dr, new DirectionsRequestOptions()
        {
            StripLegsStepsLatLngs = false,
            StripOverviewPath = false,
            StripOverviewPolyline = false,
            StripLegsStepsPath = false,
            StripLegsSteps = false
        });


        var routes = _directionsResult.Routes.SelectMany(x => x.Legs).ToList();

        foreach (var route in routes)
        {
            _durationTotalString += route.DurationInTraffic?.Text;
            _distanceTotalString += route.Distance.Text;
        }
    }


}









