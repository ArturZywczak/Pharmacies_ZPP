@page "/pharmacySearch"

@using Pharmacies.Data.Services
@using Pharmacies.Data.Interfaces
@using Pharmacies.Data.Models
@using Pharmacies.Server.Controls
@using System.Linq

@using GoogleMapsComponents
@using GoogleMapsComponents.Maps


@inject IJSRuntime JSRuntime
@inject IPharmacyService PharmacyService


<link rel="stylesheet" href="css/PharmacySearch.css" />




<div class="container">
    <div class="row">
        <div class="col">
            <div class="search">

                <label>Search</label>
                <div class="input-group mb-3">
                    <input @bind="@_address" @oninput="(e) => { _address=e.Value.ToString(); Autocomplete(); }" type="text" id="autocomplete" class="form-control" placeholder="" aria-label="" aria-describedby="button-addon2">
                    <button @onclick="GetLocation" class="btn btn-outline-secondary" type="button" id="button-addon2">Search</button>
                </div>

            </div>
        </div>
        <div class="col"></div>
    </div>



    <div class="row">
        <div class="col">
            <div class="pharmacies">
                @if (_pharmacies != null)
                {
                    @foreach (var pharmacy in _pharmacies.results)
                    {
                        <PharmacyCard Name="@pharmacy.name" Vicinity="@pharmacy.vicinity" PlaceId="@pharmacy.place_id" Location="@pharmacy.geometry.location" ></PharmacyCard>
                    }

                }
            </div>
        </div>
        <div class="col-8">
            <GoogleMap @ref="@map" Id="map" Options="@mapOptions"></GoogleMap>
        </div>
    </div>
</div>



@code {
    private GoogleMap map;
    private MapOptions mapOptions;

    private string _address { get; set; }
    private Location _location;
    public Rootobject _pharmacies;
    private int _range = 2000;
    public int zoom = 14;



    private async Task GetLocation()
    {
        _address = await JSRuntime.InvokeAsync<string>("SetAddress");
        _location = await PharmacyService.GetSearchedLocation(_address);
        _pharmacies = await PharmacyService.SearchPharmacies(_location, _range);

        var coords = new List<Location>();

        foreach (var item in _pharmacies.results)
        {
            coords.Add(item.geometry.location);
        }

        await JSRuntime.InvokeVoidAsync("SetLocationAndMarkers", _location.lat, _location.lng, zoom, coords);

    }

    private void GetObj()
    {
        _pharmacies = PharmacyService.GetObj();

    }




    public void SetLocation(string placeId)
    {
        var place = _pharmacies.results.Where(x => x.place_id == placeId).FirstOrDefault();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initialize", null);
        }
    }

    protected override void OnInitialized()
    {
        
        mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = 13.505892,
                Lng = 100.8162
            },
            MapTypeId = MapTypeId.Roadmap

        };


    }







    public async Task Autocomplete()
    {
        await JSRuntime.InvokeVoidAsync("initAutocomplete");
    }





}









