@page "/"


@inject IJSRuntime JSRuntime
@inject IPharmacyService PharmacyService
@inject IUsersService UsersService

<link href="/css/PharmacySearch.css" rel="stylesheet" />

<div class="container">
    <div class="row">
        <div class="col">
            <div class="search">

                <div class="input-group mb-3">
                    @if (MapIsRendered)
                    {
                        <AutocompleteInput Map="map1" Fields="Fields" @ref="autocompleteInput" GetSearchedPlace="SetSearchedPlace"></AutocompleteInput>
                    }
                    <button @onclick="SearchPharmacies" class="btn btn-outline-secondary" type="button" id="button-addon2">Search</button>
                </div>

            </div>
        </div>
        <div class="col">
            <div class="row">
                <div class="col-sm-6">

                    <AreasAutocomplete SelectedArea="SearchSelectedArea"></AreasAutocomplete>

                </div>

                <div class="col-sm-3" id="select_range">

                    <select @bind="@_range" class="form-select" aria-label="Default select example">
                        <option value="500">500m</option>
                        <option value="1000">1km</option>
                        <option value="2000">2km</option>
                        <option value="5000">5km</option>
                    </select>
                </div>

                <div class="col-sm-3" id="TravelMode">
                    <EditForm Model="travelMode">

                        <InputSelect @bind-Value="travelMode" class="form-select" aria-label="Default select example">
                            @foreach (var mode in Enum.GetValues(typeof(TravelMode)))
                            {
                                <option value="@mode">@mode</option>
                            }
                        </InputSelect>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>



    <div class="row">
        <div class="col">
            <div class="pharmacies">

                @if (_pharmacies != null)
                {
                    @foreach (var pharmacy in _pharmacies.results)
                    {
                        string reference;
                        if (pharmacy.photos != null)
                        {
                            reference = pharmacy.photos[0].photo_reference;
                        }
                        else
                        {
                            reference = String.Empty;
                        }
                        <PharmacyCard Name="@pharmacy.name"
                                      Vicinity="@pharmacy.vicinity"
                                      PlaceId="@pharmacy.place_id"
                                      Location="@pharmacy.geometry.location"
                                      ImageUrl="@reference"
                                      Rating="@pharmacy.rating"
                                      OnClickCallback="CenterMarker"
                                      ShowDirections="AddDirections"></PharmacyCard>
                    }

                }

                @if (usersPharmacies != null)
                {
                    @foreach (var pharmacy in usersPharmacies)
                    {
                        string reference;
                        if (pharmacy.PhotoReference != null)
                        {
                            reference = pharmacy.PhotoReference;
                        }
                        else
                        {
                            reference = String.Empty;
                        }
                        <PharmacyCard Name="@pharmacy.Name"
                                      Vicinity="@pharmacy.Vicinity"
                                      PlaceId="@pharmacy.Id"
                                      Location="new Location { lat=pharmacy.lat,lng = pharmacy.lng}"
                                      ImageUrl="@reference"
                                      OnClickCallback="CenterMarker"
                                      ShowDirections="AddDirections"></PharmacyCard>
                    }

                }
            </div>
        </div>
        <div class="col-8">
            <GoogleMap @ref="@(this.map1)" Id="map1" Options="@(this.mapOptions)" OnAfterInit="OnAfterMapInit"></GoogleMap>
        </div>
    </div>
</div>



@code {
    private GoogleMap map1;
    private MapOptions mapOptions;

    private readonly Stack<Marker> markers = new Stack<Marker>();
    private MarkerClustering _markerClustering;

    //autocomplete
    private AutocompleteInput autocompleteInput;
    private string[] Fields = { "address_components", "geometry", "name" };
    private bool MapIsRendered = false;
    //private Autocomplete autocomplete;
    //private string message;
    //private ElementReference searchBox;

    private string _address { get; set; }
    private Location _location;
    public Rootobject _pharmacies;
    public List<PharmacyModel> usersPharmacies;
    private int _range = 500;
    public int zoom = 14;

    //geolocation
    private WindowNavigatorGeolocation geolocation;
    private GeolocationPosition geolocationPosition;
    private PlaceResult searchedPlace;

    //directions
    private DirectionsRenderer dirRend;
    private string _durationTotalString;
    private string _distanceTotalString;
    private DirectionsResult _directionsResult;
    private TravelMode travelMode = TravelMode.Driving;

    private string ImageSrc;


    private Polygon areaPolygon;



    private async Task SearchPharmacies()
    {
        Reset();
        usersPharmacies = UsersService.GetPlacesInRange(searchedPlace.Geometry.Location.Lat, searchedPlace.Geometry.Location.Lng, _range);
        _pharmacies = await PharmacyService.SearchPharmacies(searchedPlace.Geometry.Location.Lat, searchedPlace.Geometry.Location.Lng, _range);

        var coords = new List<(LatLngLiteral latlng, string name)>();

        foreach (var item in _pharmacies.results)
        {
            coords.Add((new LatLngLiteral { Lat = item.geometry.location.lat, Lng = item.geometry.location.lng }, item.name));
        }

        var ids = _pharmacies.results.Select(x => x.place_id).ToList();
        foreach (var item in ids)
        {
            usersPharmacies = usersPharmacies.Where(p => p.Id != item).ToList();
        }

        foreach (var item in usersPharmacies)
        {
            if (!ids.Contains(item.Id))
            {
                coords.Add((new LatLngLiteral { Lat = item.lat, Lng = item.lng }, item.Name));
            }
            else
            {
                var pharmacyToRemove = usersPharmacies.Where(x => x.Id == item.Id).FirstOrDefault();
                usersPharmacies.Remove(pharmacyToRemove);
            }
        }

        if (_markerClustering != null)
            await ClearClustering();

        await InvokeClustering(coords);

    }


    private async Task InvokeClustering(List<(LatLngLiteral, string)> coords)
    {
        var markers = await GetMarkers(coords, map1.InteropObject);

        _markerClustering = await MarkerClustering.CreateAsync(map1.JsRuntime, map1.InteropObject, markers);
        await _markerClustering.FitMapToMarkers(1);
    }

    private async Task ClearClustering()
    {
        await _markerClustering.ClearMarkers();
    }

    private async Task<IEnumerable<Marker>> GetMarkers(IEnumerable<(LatLngLiteral, string)> coords, Map map)
    {
        var result = new List<Marker>(coords.Count());
        foreach (var latLngLiteral in coords)
        {
            var marker = await Marker.CreateAsync(map1.JsRuntime, new MarkerOptions()
            {
                Position = latLngLiteral.Item1,
                Map = map,

            });

            var infoWindowContent = $@"<p>{latLngLiteral.Item2}</p>";

            var infoWindow = await InfoWindow.CreateAsync(map1.JsRuntime, new InfoWindowOptions()
            {
                Position = latLngLiteral.Item1
            });

            await marker.AddListener("click", async () =>
            {
                await infoWindow.SetContent(infoWindowContent);
                await infoWindow.SetPosition(latLngLiteral.Item1);
                await infoWindow.Open(map1.InteropObject);
            });

            result.Add(marker);
        }
        return result;
    }

    private async Task CenterMarker(Location markerLocation)
    {
        await this.map1.InteropObject.SetCenter(new LatLngLiteral { Lat = markerLocation.lat, Lng = markerLocation.lng });
    }


    protected override async Task OnInitializedAsync()
    {

        var window = await JSRuntime.Window();
        var navigator = await window.Navigator();

        geolocation = navigator.Geolocation;

        await GetUserLocation();
        try
        {

            await this.map1.InteropObject.SetCenter(new LatLngLiteral { Lat = geolocationPosition.Coords.Latitude, Lng = geolocationPosition.Coords.Longitude });
            await this.map1.InteropObject.SetZoom(zoom);
        }
        catch (Exception)
        {
            await this.map1.InteropObject.SetCenter(new LatLngLiteral { Lat = 52.2330269, Lng = 20.7810098 });
            await this.map1.InteropObject.SetZoom(6);
        }

        dirRend = await DirectionsRenderer.CreateAsync(map1.JsRuntime, new DirectionsRendererOptions()
        {
            Map = map1.InteropObject
        });

        this.StateHasChanged();

    }


    public async Task GetUserLocation()
    {
        geolocationPosition = (await geolocation.GetCurrentPosition(new PositionOptions()
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
        })).Location;

    }




    private async Task OnAfterMapInit()
    {
        MapIsRendered = true;
        this.StateHasChanged();
        await autocompleteInput.InitAutocomplete();
    }


    private void SetSearchedPlace(PlaceResult searchedPlace)
    {
        this.searchedPlace = searchedPlace;
    }


    //directions

    private async Task RemoveRoute()
    {
        await dirRend.SetDirections(null);
        await dirRend.SetMap(null);
    }


    private async Task AddDirections(Location location)
    {
        //Adding a waypoint

        //Direction Request
        DirectionsRequest dr = new DirectionsRequest();
        dr.Origin = searchedPlace.Geometry.Location;
        dr.Destination = new LatLngLiteral { Lat = location.lat, Lng = location.lng };
        dr.TravelMode = travelMode;
        dr.DrivingOptions = new DrivingOptions()
        {
            DepartureTime = DateTime.Now.AddHours(1)
        };

        //Calculate Route
        _directionsResult = await dirRend.Route(dr, new DirectionsRequestOptions()
        {
            StripLegsStepsLatLngs = false,
            StripOverviewPath = false,
            StripOverviewPolyline = false,
            StripLegsStepsPath = false,
            StripLegsSteps = false
        });


        var routes = _directionsResult.Routes.SelectMany(x => x.Legs).ToList();

        foreach (var route in routes)
        {
            _durationTotalString += route.DurationInTraffic?.Text;
            _distanceTotalString += route.Distance.Text;
        }
    }


    private async Task SearchSelectedArea(AreaModel area)
    {
        usersPharmacies = null;
        areaPolygon = await Polygon.CreateAsync(map1.JsRuntime, new PolygonOptions() { Map = map1.InteropObject });
        if (area != null)
        {

            var areaCoords = area.BoundariesCoords;
            var deserializedCoords = JsonConvert.DeserializeObject<IEnumerable<LatLngLiteral>>(areaCoords);

            await areaPolygon.SetPath(deserializedCoords);


            var pharmacies = await PharmacyService.GetPharmaciesFromDB();
            List<PharmacyModel> pharmaciesInArea = new List<PharmacyModel>();
            foreach (var pharmacy in pharmacies)
            {
                if (await JSRuntime.InvokeAsync<bool>("IsInArea", pharmacy.lat, pharmacy.lng, deserializedCoords))
                {
                    pharmaciesInArea.Add(pharmacy);
                }
            }

            usersPharmacies = pharmaciesInArea;

            if (pharmaciesInArea.Count != 0)
            {
                await this.map1.InteropObject.SetZoom(10);
                await this.map1.InteropObject.SetCenter(new LatLngLiteral { Lat = usersPharmacies[0].lat, Lng = usersPharmacies[0].lng });

            }

            if (_markerClustering != null)
                await ClearClustering();

            var coords = new List<(LatLngLiteral latlng, string name)>();

            foreach (var pharmacy in usersPharmacies)
            {
                coords.Add((new LatLngLiteral { Lat = pharmacy.lat, Lng = pharmacy.lng }, pharmacy.Name));
            }

            if (coords.Count != 0)
                await InvokeClustering(coords);
        }
        else
        {
            Reset();
        }


    }

    private void Reset()
    {
        if (areaPolygon != null)
            areaPolygon.SetMap(null);
        usersPharmacies = null;
        _pharmacies = null;
        this.StateHasChanged();
    }




}









