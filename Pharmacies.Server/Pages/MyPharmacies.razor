@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Pharmacies.Server.Interfaces
@using Pharmacies.Server.Models
@using Microsoft.AspNetCore.Components.Web.Virtualization


@page "/mypharmacies"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUsersService UsersService
@inject IJSRuntime JSRuntime

<link href="/css/MyPharmaciesStyle.css" rel="stylesheet" />

@attribute [Authorize(Roles = "VerifiedUser")]

<AuthorizeView>
    <Authorized>
        <div class="container">
            <section>
                <div class="row">
                    <div class="col">
                        <p>
                            <button class="btn btn-primary collapsible" data-bs-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
                                Actions
                            </button>
                        </p>
                        <div class="collapse" id="collapseExample">

                            <div class="card text-center" style="width: 49%; text-align:center; display:inline-block;">
                                <div class="card-body">
                                    <h5 class="card-title">Add existing pharmacy</h5>
                                    <p class="card-text"></p>
                                    <a href="/addexistingpharmacy" class="btn btn-primary">+</a>
                                </div>
                            </div>


                            <div class="card text-center" style="width: 49%; text-align:center; display:inline-block;">
                                <div class="card-body">
                                    <h5 class="card-title">Register new pharmacy</h5>
                                    <p class="card-text"></p>
                                    <a href="/newpharmacy" class="btn btn-primary">+</a>
                                </div>
                            </div>

                        </div>


                    </div>
                </div>
            </section>
            <hr />
            <section>
                <h3>Your Pharmacies</h3>

                <div class="row">
                    <div class="col">
                        <Virtualize Context="pharmacy" ItemsProvider="@LoadPharmacies">
                            <div class="card text-center pharmacies">
                                <div class="card-body">
                                    <h5 class="card-title">@pharmacy.Name</h5>
                                    <p class="card-text">@pharmacy.Vicinity</p>
                                    <a href="/managepharmacy/@pharmacy.Id" class="btn btn-primary">Manage</a>
                                </div>
                            </div>
                        </Virtualize>
                    </div>

                </div>
            </section>
        </div>

    </Authorized>
    <NotAuthorized>
        <p>Authorized access only!</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    public ClaimsPrincipal User { get; set; }
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    public List<PharmacyModel> UsersPharmacies { get; set; } = new List<PharmacyModel>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;

        if (User.Identity.IsAuthenticated)
            _claims = User.Claims;


        await base.OnInitializedAsync();
    }


    private void GetUsersPharmacies()
    {
        var userId = _claims.Where(x => x.Type.Contains("identifier")).Select(x => x.Value).FirstOrDefault();

        var pharmacies = UsersService.GetUsersPharmacies(userId);

        UsersPharmacies = pharmacies.Result.ToList();
    }

    private async ValueTask<ItemsProviderResult<PharmacyModel>> LoadPharmacies(ItemsProviderRequest request)
    {
        var userId = _claims.Where(x => x.Type.Contains("identifier")).Select(x => x.Value).FirstOrDefault();

        var pharmacies = UsersService.GetUsersPharmacies(userId);

        UsersPharmacies = pharmacies.Result.ToList();
        return new ItemsProviderResult<PharmacyModel>(UsersPharmacies, UsersPharmacies.Count());
    }

    private async Task Expand()
    {
        await JSRuntime.InvokeVoidAsync("expand");
    }

}




